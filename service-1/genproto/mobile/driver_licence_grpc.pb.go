// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: driver_licence.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DriverLicenceService_Create_FullMethodName  = "/mobile.DriverLicenceService/Create"
	DriverLicenceService_GetById_FullMethodName = "/mobile.DriverLicenceService/GetById"
	DriverLicenceService_GetAll_FullMethodName  = "/mobile.DriverLicenceService/GetAll"
	DriverLicenceService_Delete_FullMethodName  = "/mobile.DriverLicenceService/Delete"
)

// DriverLicenceServiceClient is the client API for DriverLicenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverLicenceServiceClient interface {
	Create(ctx context.Context, in *DriverLicenceCreateReq, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*DriverLicenceGetByIdRes, error)
	GetAll(ctx context.Context, in *DriverLicenceGetAllReq, opts ...grpc.CallOption) (*DriverLicenceGetAllRes, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type driverLicenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverLicenceServiceClient(cc grpc.ClientConnInterface) DriverLicenceServiceClient {
	return &driverLicenceServiceClient{cc}
}

func (c *driverLicenceServiceClient) Create(ctx context.Context, in *DriverLicenceCreateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, DriverLicenceService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverLicenceServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*DriverLicenceGetByIdRes, error) {
	out := new(DriverLicenceGetByIdRes)
	err := c.cc.Invoke(ctx, DriverLicenceService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverLicenceServiceClient) GetAll(ctx context.Context, in *DriverLicenceGetAllReq, opts ...grpc.CallOption) (*DriverLicenceGetAllRes, error) {
	out := new(DriverLicenceGetAllRes)
	err := c.cc.Invoke(ctx, DriverLicenceService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverLicenceServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, DriverLicenceService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverLicenceServiceServer is the server API for DriverLicenceService service.
// All implementations must embed UnimplementedDriverLicenceServiceServer
// for forward compatibility
type DriverLicenceServiceServer interface {
	Create(context.Context, *DriverLicenceCreateReq) (*Void, error)
	GetById(context.Context, *ById) (*DriverLicenceGetByIdRes, error)
	GetAll(context.Context, *DriverLicenceGetAllReq) (*DriverLicenceGetAllRes, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedDriverLicenceServiceServer()
}

// UnimplementedDriverLicenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriverLicenceServiceServer struct {
}

func (UnimplementedDriverLicenceServiceServer) Create(context.Context, *DriverLicenceCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDriverLicenceServiceServer) GetById(context.Context, *ById) (*DriverLicenceGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedDriverLicenceServiceServer) GetAll(context.Context, *DriverLicenceGetAllReq) (*DriverLicenceGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDriverLicenceServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDriverLicenceServiceServer) mustEmbedUnimplementedDriverLicenceServiceServer() {}

// UnsafeDriverLicenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverLicenceServiceServer will
// result in compilation errors.
type UnsafeDriverLicenceServiceServer interface {
	mustEmbedUnimplementedDriverLicenceServiceServer()
}

func RegisterDriverLicenceServiceServer(s grpc.ServiceRegistrar, srv DriverLicenceServiceServer) {
	s.RegisterService(&DriverLicenceService_ServiceDesc, srv)
}

func _DriverLicenceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverLicenceCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverLicenceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverLicenceService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverLicenceServiceServer).Create(ctx, req.(*DriverLicenceCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverLicenceService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverLicenceServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverLicenceService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverLicenceServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverLicenceService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverLicenceGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverLicenceServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverLicenceService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverLicenceServiceServer).GetAll(ctx, req.(*DriverLicenceGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverLicenceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverLicenceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverLicenceService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverLicenceServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverLicenceService_ServiceDesc is the grpc.ServiceDesc for DriverLicenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverLicenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mobile.DriverLicenceService",
	HandlerType: (*DriverLicenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DriverLicenceService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _DriverLicenceService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _DriverLicenceService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DriverLicenceService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver_licence.proto",
}
