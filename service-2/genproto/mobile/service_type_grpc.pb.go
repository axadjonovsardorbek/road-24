// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: service_type.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceTypeService_Create_FullMethodName  = "/mobile.ServiceTypeService/Create"
	ServiceTypeService_GetById_FullMethodName = "/mobile.ServiceTypeService/GetById"
	ServiceTypeService_GetAll_FullMethodName  = "/mobile.ServiceTypeService/GetAll"
	ServiceTypeService_Delete_FullMethodName  = "/mobile.ServiceTypeService/Delete"
)

// ServiceTypeServiceClient is the client API for ServiceTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceTypeServiceClient interface {
	Create(ctx context.Context, in *ServiceTypeCreateReq, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ServiceTypeGetByIdRes, error)
	GetAll(ctx context.Context, in *ServiceTypeGetAllReq, opts ...grpc.CallOption) (*ServiceTypeGetAllRes, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
}

type serviceTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceTypeServiceClient(cc grpc.ClientConnInterface) ServiceTypeServiceClient {
	return &serviceTypeServiceClient{cc}
}

func (c *serviceTypeServiceClient) Create(ctx context.Context, in *ServiceTypeCreateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, ServiceTypeService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTypeServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*ServiceTypeGetByIdRes, error) {
	out := new(ServiceTypeGetByIdRes)
	err := c.cc.Invoke(ctx, ServiceTypeService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTypeServiceClient) GetAll(ctx context.Context, in *ServiceTypeGetAllReq, opts ...grpc.CallOption) (*ServiceTypeGetAllRes, error) {
	out := new(ServiceTypeGetAllRes)
	err := c.cc.Invoke(ctx, ServiceTypeService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTypeServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, ServiceTypeService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceTypeServiceServer is the server API for ServiceTypeService service.
// All implementations must embed UnimplementedServiceTypeServiceServer
// for forward compatibility
type ServiceTypeServiceServer interface {
	Create(context.Context, *ServiceTypeCreateReq) (*Void, error)
	GetById(context.Context, *ById) (*ServiceTypeGetByIdRes, error)
	GetAll(context.Context, *ServiceTypeGetAllReq) (*ServiceTypeGetAllRes, error)
	Delete(context.Context, *ById) (*Void, error)
	mustEmbedUnimplementedServiceTypeServiceServer()
}

// UnimplementedServiceTypeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceTypeServiceServer struct {
}

func (UnimplementedServiceTypeServiceServer) Create(context.Context, *ServiceTypeCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceTypeServiceServer) GetById(context.Context, *ById) (*ServiceTypeGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedServiceTypeServiceServer) GetAll(context.Context, *ServiceTypeGetAllReq) (*ServiceTypeGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedServiceTypeServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceTypeServiceServer) mustEmbedUnimplementedServiceTypeServiceServer() {}

// UnsafeServiceTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceTypeServiceServer will
// result in compilation errors.
type UnsafeServiceTypeServiceServer interface {
	mustEmbedUnimplementedServiceTypeServiceServer()
}

func RegisterServiceTypeServiceServer(s grpc.ServiceRegistrar, srv ServiceTypeServiceServer) {
	s.RegisterService(&ServiceTypeService_ServiceDesc, srv)
}

func _ServiceTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceTypeCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTypeServiceServer).Create(ctx, req.(*ServiceTypeCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTypeService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTypeServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTypeService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTypeServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTypeService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceTypeGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTypeServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTypeService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTypeServiceServer).GetAll(ctx, req.(*ServiceTypeGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTypeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTypeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTypeService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTypeServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceTypeService_ServiceDesc is the grpc.ServiceDesc for ServiceTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mobile.ServiceTypeService",
	HandlerType: (*ServiceTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ServiceTypeService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ServiceTypeService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ServiceTypeService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceTypeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_type.proto",
}
