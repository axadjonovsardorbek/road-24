// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: fine.proto

package mobile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FineService_Create_FullMethodName  = "/mobile.FineService/Create"
	FineService_GetById_FullMethodName = "/mobile.FineService/GetById"
	FineService_GetAll_FullMethodName  = "/mobile.FineService/GetAll"
	FineService_Update_FullMethodName  = "/mobile.FineService/Update"
)

// FineServiceClient is the client API for FineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FineServiceClient interface {
	Create(ctx context.Context, in *FineCreateReq, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*FineGetByIdRes, error)
	GetAll(ctx context.Context, in *FineGetAllReq, opts ...grpc.CallOption) (*FineGetAllRes, error)
	Update(ctx context.Context, in *FineUpdateReq, opts ...grpc.CallOption) (*Void, error)
}

type fineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFineServiceClient(cc grpc.ClientConnInterface) FineServiceClient {
	return &fineServiceClient{cc}
}

func (c *fineServiceClient) Create(ctx context.Context, in *FineCreateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, FineService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*FineGetByIdRes, error) {
	out := new(FineGetByIdRes)
	err := c.cc.Invoke(ctx, FineService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineServiceClient) GetAll(ctx context.Context, in *FineGetAllReq, opts ...grpc.CallOption) (*FineGetAllRes, error) {
	out := new(FineGetAllRes)
	err := c.cc.Invoke(ctx, FineService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fineServiceClient) Update(ctx context.Context, in *FineUpdateReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, FineService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FineServiceServer is the server API for FineService service.
// All implementations must embed UnimplementedFineServiceServer
// for forward compatibility
type FineServiceServer interface {
	Create(context.Context, *FineCreateReq) (*Void, error)
	GetById(context.Context, *ById) (*FineGetByIdRes, error)
	GetAll(context.Context, *FineGetAllReq) (*FineGetAllRes, error)
	Update(context.Context, *FineUpdateReq) (*Void, error)
	mustEmbedUnimplementedFineServiceServer()
}

// UnimplementedFineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFineServiceServer struct {
}

func (UnimplementedFineServiceServer) Create(context.Context, *FineCreateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFineServiceServer) GetById(context.Context, *ById) (*FineGetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedFineServiceServer) GetAll(context.Context, *FineGetAllReq) (*FineGetAllRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedFineServiceServer) Update(context.Context, *FineUpdateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFineServiceServer) mustEmbedUnimplementedFineServiceServer() {}

// UnsafeFineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FineServiceServer will
// result in compilation errors.
type UnsafeFineServiceServer interface {
	mustEmbedUnimplementedFineServiceServer()
}

func RegisterFineServiceServer(s grpc.ServiceRegistrar, srv FineServiceServer) {
	s.RegisterService(&FineService_ServiceDesc, srv)
}

func _FineService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FineCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FineService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineServiceServer).Create(ctx, req.(*FineCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FineService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FineGetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FineService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineServiceServer).GetAll(ctx, req.(*FineGetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FineService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FineUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FineServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FineService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FineServiceServer).Update(ctx, req.(*FineUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FineService_ServiceDesc is the grpc.ServiceDesc for FineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mobile.FineService",
	HandlerType: (*FineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FineService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _FineService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _FineService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FineService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fine.proto",
}
